#!/usr/bin/env ruby
# frozen_string_literal: true

require "pathname"
ENV["BUNDLE_GEMFILE"] ||= File.expand_path("../../Gemfile",
                                           Pathname.new(__FILE__).realpath)

require "rubygems"
require "bundler/setup"

require "optparse"
require "oj"
require "sanscript"
require "pp"

optparse = OptionParser.new do |opts|
  opts.banner = "Usage: cx2nex [options] file.json"
end
optparse.parse!

abort(optparse.banner) if ARGV.empty?

infile = ARGV.shift.to_s
if infile == "-"
  STDIN.set_encoding("BOM|UTF-8")
  infile_data = STDIN.read
else
  infile = File.expand_path(infile)
  unless File.exist?(infile)
    STDERR.puts "File #{infile} not found."
    STDERR.puts optparse
    exit(1)
  end
  infile_data = File.read(infile)
end

cx = Oj.load(infile_data)

TOKEN_KEYS = (("0".."9").to_a +
              ("A".."Z").to_a +
              ("a".."z").to_a)
             .each_with_object({}).with_index { |(t, h), i| h[t] = i }.freeze

TOKEN_INDEX = TOKEN_KEYS.keys.freeze

def weighted_uniq(array)
  weighted_hash = array.each_with_object({}) do |v, acc|
    acc[v] ||= 0
    acc[v] += 1
  end
  n = 0
  (weighted_hash.sort_by do |x|
    n += 1
    [-x[1], n]
  end).to_h
end

def sanitize_id(str)
  return "" if str.nil? || str.empty?
  "'#{str.to_s.gsub("'", "''")}'"
end

ntax = cx["witnesses"].to_a.size
taxlabels = cx["witnesses"].to_a.map { |t| sanitize_id(t) }
nchar = cx["table"].map(&:count).max

matrix = cx["witnesses"].each_with_object({}) { |w, acc| acc[sanitize_id(w)] = [] }

charstates = (0...nchar).each_with_object({}) do |ci, acc|
  variants = cx["table"].map do |w|
    w[ci].map { |ts| ts["t"] }.join(" ").strip
  end

  vacc = {}
  weighted_uniq(variants.reject(&:empty?)).each_key.with_index do |v, vi|
    vacc[v] = TOKEN_INDEX[vi]
  end
  acc[ci] = vacc

  variants.each_with_index do |v, i|
    matrix[taxlabels[i]][ci] = (vacc[v] || "-")
  end
end

charstate_labels = charstates.map do |ci, vs|
  "#{ci + 1} /" + vs.keys.map { |v| sanitize_id(v) }.join(" ")
end

nexus_output = <<~NEXUS_EOF
  #NEXUS

  BEGIN TAXA;
  	TITLE 'Witnesses';
  	DIMENSIONS NTAX=#{ntax};
  	TAXLABELS #{taxlabels.join(' ')};
  END;

  BEGIN CHARACTERS;
    TITLE 'Variants';
    DIMENSIONS
      NCHAR=#{nchar};
    FORMAT
      DATATYPE = STANDARD
      RESPECTCASE
      GAP = -
      MISSING = ?
      SYMBOLS = "#{TOKEN_KEYS.keys.join(' ')}"
      LABELS = LEFT;
    CHARSTATELABELS
      #{charstate_labels.join(",\n    ")}
    ;
    MATRIX
      #{matrix.map { |k, v| "#{k} #{v.join('')}" }.join("\n    ")}
    ;
  END;

NEXUS_EOF

STDOUT.set_encoding("UTF-8")
STDOUT.puts nexus_output
